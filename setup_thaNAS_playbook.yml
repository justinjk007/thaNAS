########################################################################
# Playbook was tested on Ubuntu 20.04 (focal) minimal install over ssh #
########################################################################

---
- hosts: thanas
  become: true
  gather_facts: true
  vars_files: ansible_vault.yml

  tasks:
    - name: Add user and add user to sudoers list
      user:
        name: kaipada
        groups: sudo
        append: yes
        password: "{{ password |  password_hash('sha512') }}"
        create_home: yes
        shell: /bin/bash
    - name: Add authorized keys
      authorized_key:
        user=kaipada state=present key='{{ item }}'
      with_file:
        - key.pub
    - name: Add authorized keys for root
      authorized_key:
        user=root state=present key='{{ item }}'
      with_file:
        - key.pub
    - name: Copy a custom ssh banner
      ansible.builtin.copy:
        src: ssh_banner.txt
        dest: /etc/ssh/sshd-banner
        owner: root
        group: root
        mode: '0755'
    - name: Enable custom banner
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        firstmatch: yes
        regexp: '^(.*)Banner'
        line: Banner /etc/ssh/sshd-banner
    - name: Set a hostname
      ansible.builtin.hostname:
        name: thaNAS
    - name: Restart sshd service
      service: name=sshd state=restarted
    - name: Keep the laptop working if the lid is closed
      ansible.builtin.lineinfile:
        path: /etc/systemd/logind.conf
        regexp: '^(.*)HandleLidSwitch='
        line: "HandleLidSwitch=ignore"
    - name: Enable wake on lan after every reboot
      # Find the Ethernet device id, more info in the readme file
      ansible.builtin.cron:
        name: "enable wake on lan"
        special_time: reboot
        job: "ethtool -s enp7s0 wol g > /tmp/enable_wake_on_lan.log  2>&1"
      tags: [ 'wol', 'wake on lan' ]
    - name: Setup screen and other configs
      ansible.builtin.copy:
        src: '{{ item }}'
        dest: '/home/kaipada/{{ item }}'
        owner: kaipada
        group: kaipada
        mode: '0755'
      with_items:
        - .screenrc
        - .bashrc
        - .bash_profile
      tags: [ 'bash' ]
    - name: Add synology NAS to the hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: 192.168.0.29 synology
        insertafter: EOF
      tags: [ 'synology' ]
    - name: Create a file with SMB credentials
      ansible.builtin.copy:
        src: .smbcredentials
        dest: /home/kaipada/.smbcredentials
        owner: kaipada
        group: kaipada
        mode: '0600'
      tags: [ 'synology' ]
    - name: Change password in credentials file
      ansible.builtin.lineinfile:
        path: /home/kaipada/.smbcredentials
        regexp: 'password='
        line: "password={{ SMP_PASSWORD }}"
      tags: [ 'synology' ]
    - name: Add synology NAS to the system with cifs
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: //synology/media /mnt/nas_data cifs credentials=/home/kaipada/.smbcredentials,vers=3.0,uid=1000,gid=1000 0 0
        insertafter: EOF
      tags: [ 'synology' ]
    - name: Mount the NAS
      ansible.builtin.command: mount /mnt/nas_data
      tags: [ 'synology' ]
    - name: Create media directories
      file:
        path: '{{ item }}'
        state: directory
      with_items:
        - /mnt/data
        - /mnt/data/downloads
        - /mnt/data/media/tv
        - /mnt/data/media/movies
        - /mnt/data/media/music
        - /home/kaipada/plex
        - /mnt/nas_data
        - /mnt/nas_data/downloads
        - /mnt/nas_data/media/tv
        - /mnt/nas_data/media/movies
        - /mnt/nas_data/media/music
      tags: [ 'synology' ]
    - name: Create symlinks
      file:
        src: "/mnt/nas_data/{{ item }}"
        dest: "/home/kaipada/{{ item }}"
        state: link
      with_items:
        - downloads
        - media
    - name: Install Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'vim','rsync','wget','screen', 'apt-transport-https', 'ca-certificates', 'curl' ,'gnupg' ]
      tags: [ 'install' ]
    - name: Install Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'lsb-release', 'p7zip-full','python3-pip', 'intel-gpu-tools', 'cifs-utils' ]
      tags: [ 'install' ]
    - name: Get ubuntu version
      command: lsb_release -cs
      register: ubuntu_version
      tags: [ 'docker' ]
    - name: Get system info
      command: uname -s
      register: unameS
      tags: [ 'docker' ]
    - name: Get system info
      command: uname -m
      register: unameM
      tags: [ 'docker' ]
    - name: Add a signing key for docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present
      tags: [ 'docker' ]
    - name: Add docker repository into sources list
      ansible.builtin.apt_repository:
        repo: 'deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ubuntu_version.stdout }} stable'
        filename: docker.list
        state: present
      tags: [ 'docker' ]
    - name: Install Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'docker-ce','docker-ce-cli','containerd.io']
      tags: [ 'docker' ]
    - name: Add user to docker group
      user:
        name=kaipada groups=docker append=yes
      tags: [ 'docker' ]
    - name: Install docker-compose
      get_url:
         url : 'https://github.com/docker/compose/releases/download/1.28.5/docker-compose-{{ unameS.stdout }}-{{ unameM.stdout }}'
         dest: /usr/local/bin/docker-compose
         mode: 'u+x,g+x'
      tags: [ 'docker' ]
    - name: Copy docker compose file over to remote
      ansible.builtin.copy:
        src: docker-compose.yml
        dest: /home/kaipada/plex/docker-compose.yml
        owner: kaipada
        group: kaipada
        mode: '0755'
      tags: [ 'docker', 'compose']
    - name: Change username in docker compose file
      ansible.builtin.lineinfile:
        path: /home/kaipada/plex/docker-compose.yml
        regexp: '^(.*)OPENVPN_USERNAME'
        line: "        - OPENVPN_USERNAME={{ OPENVPN_USERNAME }}"
      tags: [ 'docker', 'compose']
    - name: Change password in docker compose file
      ansible.builtin.lineinfile:
        path: /home/kaipada/plex/docker-compose.yml
        regexp: '^(.*)OPENVPN_PASSWORD'
        line: "        - OPENVPN_PASSWORD={{ OPENVPN_PASSWORD }}"
      tags: [ 'docker', 'compose']
    - name: Allow all access to some tcp ports
      ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
      with_items: ['22','7878','8989','9091','32400','20']
      tags: [ 'ufw']
    - name: Allow all access to some udp ports
      ufw:
        rule: allow
        port: '{{ item }}'
        proto: udp
      with_items: ['32400']
      tags: [ 'ufw']
    - name: Enable UFW
      ufw:
        state: enabled
      tags: [ 'ufw']
    - name: Setup dropbox upload system
      get_url:
        url: https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
        dest: /home/kaipada/plex/dropbox_uploader.sh
        owner: kaipada
        group: kaipada
        mode: '0700'
      tags: [ 'backup']
    - name: Setup config backup system
      ansible.builtin.copy:
        src: backup_config.sh
        dest: /home/kaipada/plex/backup_config.sh
        owner: kaipada
        group: kaipada
        mode: '0700'
      tags: [ 'backup']
    - name: Change password in backup script
      ansible.builtin.lineinfile:
        path: /home/kaipada/plex/backup_config.sh
        regexp: 'PASSWORD_7z='
        line: "PASSWORD_7z={{ PASSWORD_7Z }}"
      tags: [ 'backup']
    - name: Ensure backup job is once a day
      ansible.builtin.cron:
        name: "backup config"
        special_time: daily
        job: "/home/kaipada/plex/backup_config.sh > /tmp/backup_config.log  2>&1"
      become: yes
      become_user: kaipada
      tags: [ 'backup']
    # - name: Setup data backup system to passport HDD
    #   ansible.builtin.copy:
    #     src: backup_to_passport.sh
    #     dest: /home/kaipada/plex/backup_to_passport.sh
    #     owner: kaipada
    #     group: kaipada
    #     mode: '0755'
    #   tags: [ 'passport']
    # - name: Ensure backup job is once a day
    #   ansible.builtin.cron:
    #     name: "backup config"
    #     minute: "5"
    #     hour: "8" # 8am
    #     job: "/home/kaipada/plex/backup_to_passport.sh > /tmp/passport_backup_config.log  2>&1"
    #   tags: [ 'passport']
    - name: Add transmission repository into sources list
      ansible.builtin.apt_repository:
        validate_certs: no
        repo: 'ppa:transmissionbt/ppa'
        state: present
      tags: [ 'transmission' ]
    - name: Install transmission remote
      apt: update_cache=yes name=transmission-cli
      tags: [ 'transmission' ]
    - name: Setup transmission cleanup system
      ansible.builtin.copy:
        src: remove_completed.sh
        dest: /home/kaipada/plex/remove_completed.sh
        owner: kaipada
        group: kaipada
        mode: '0700'
      tags: [ 'transmission' ]
    - name: Ensure transmission cleanup job is run once a month
      ansible.builtin.cron:
        name: "remove completed"
        special_time: monthly
        job: "/home/kaipada/plex/remove_completed.sh > /tmp/cleanup_transmission.log  2>&1"
      become: yes
      become_user: kaipada
      tags: [ 'transmission' ]
    - name: Download PlexTraktSync
      get_url:
         url : https://github.com/Taxel/PlexTraktSync/archive/refs/tags/0.15.10.zip
         dest: /home/kaipada/plex/PlexTraktSync.zip
         owner: kaipada
         group: kaipada
         mode: '0700'
      tags: [ 'trakt' ]
    - name: Unzip PlexTraktSync
      ansible.builtin.unarchive:
        src: /home/kaipada/plex/PlexTraktSync.zip
        dest: /home/kaipada/plex/
        owner: kaipada
        group: kaipada
        mode: '0700'
        remote_src: yes
      tags: [ 'trakt' ]
    - name: Remove PlexTraktSync zip file
      file:
        state: absent
        path: /home/kaipada/plex/PlexTraktSync.zip
      tags: [ 'trakt' ]
    - name: Install python requirements for PlexTraktSync
      pip:
        requirements: /home/kaipada/plex/PlexTraktSync-0.15.10/requirements.txt
        executable: pip3
      tags: [ 'trakt' ]
      # Setup the app: https://github.com/Taxel/PlexTraktSync#setup
    - name: Run plexTraktSync hourly
      ansible.builtin.cron:
        name: "PlexTraktSync"
        special_time: hourly
        job: "date > /tmp/plex_trakt_sync.log && cd /home/kaipada/plex/PlexTraktSync-0.15.10 && python3 -m plex_trakt_sync >> /tmp/plex_trakt_sync.log  2>&1"
      become: yes
      become_user: kaipada
      tags: [ 'traktcron', 'trakt' ]
